import nmap
import argparse
import config
from pprint import pprint


class Scaner(object):
    def __init__(self, host, ports=None, service_detect=False, os_detect=False, manual_args=None):
        self.target = host
        self.ports = ports
        self.alive_port = "22,80,443,445,135,139,3389,8007-8011,8443,9090,8080-8091,8093,8099,5000-5004,2222,3306,1433,21,25"
        self.nmap_arguments = "-sS -n -PE -PS{} --open".format(self.alive_port)
        self.host_timeout = 60 * 10
        if service_detect:
            self.host_timeout += 60 * 10
            self.nmap_arguments += " -sV"
        if os_detect:
            self.host_timeout += 60 * 4
            self.nmap_arguments += " -O"
        if self.ports == "0-65535":
            self.host_timeout += 60 * 10
        if manual_args:
            self.nmap_arguments += " " + manual_args
        self.nmap_arguments += " --min-rate 64"
        self.nmap_arguments += " --host-timeout {}".format(self.host_timeout)
        self.nmap_arguments += " --min-hostgroup 64 --min-parallelism 64"

    def run(self):
        nm = nmap.PortScanner()
        nm.scan(hosts=self.target, ports=self.ports, arguments=self.nmap_arguments)
        for host in nm.all_hosts():
            pprint(nm[host])


def get_args():
    scan_args = dict()
    parser = argparse.ArgumentParser(
        description="it is a port scaner use nmap", prog="port scaner")
    parser.add_argument("--host", "-H", dest="host", type=str,
                        required=True, help="the ip you need to scan")
    parser.add_argument("--port", "-P", dest="ports",
                        type=str, default="100",
                        help="the port we need scan default is Top 100 ,and have all,TOP_10,TOP_1000 or set by your own")
    parser.add_argument("--service_detect", "-S", dest="service_detect",
                        action="store_true", help="enable service detect default false")
    parser.add_argument("--os_detect", "-O", dest="os_detect",
                        action="store_true", help="enable os detect default false")
    parser.add_argument("--manual_args", "-M", type=str, dest="manual_args", default=None,
                        help="add manul nmap scan args")
    args = parser.parse_args()
    if args.ports == "all":
        scan_args["ports"] = "0-65535"
    elif args.ports == "10":
        scan_args["ports"] = config.TOP_10
    elif args.ports == "100":
        scan_args["ports"] = config.TOP_100
    elif args.ports == "1000":
        scan_args["ports"] = config.TOP_1000
    else:
        scan_args["ports"] = args.ports
    scan_args["host"] = args.host
    scan_args["service_detect"] = args.service_detect
    scan_args["os_detect"] = args.os_detect
    scan_args["manual_args"] = args.manual_args
    return scan_args


def main():
    scan_args = get_args()
    print(scan_args)
    p = Scaner(host=scan_args["host"], ports=scan_args["ports"], service_detect=scan_args["service_detect"], os_detect=scan_args["os_detect"], manual_args=scan_args["manual_args"])
    p.run()


if __name__ == "__main__":
    main()
